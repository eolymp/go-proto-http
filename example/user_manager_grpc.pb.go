// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package compete

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// UserManagerClient is the client API for UserManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserManagerClient interface {
	CreateUser(ctx context.Context, in *CreateUserInput, opts ...grpc.CallOption) (*CreateUserOutput, error)
	DeleteUser(ctx context.Context, in *DeleteUserInput, opts ...grpc.CallOption) (*DeleteUserOutput, error)
	GetComments(ctx context.Context, in *GetCommentsInput, opts ...grpc.CallOption) (*GetCommentsOutput, error)
	CreateComment(ctx context.Context, in *CreateCommentInput, opts ...grpc.CallOption) (*CreateCommentOutput, error)
}

type userManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewUserManagerClient(cc grpc.ClientConnInterface) UserManagerClient {
	return &userManagerClient{cc}
}

func (c *userManagerClient) CreateUser(ctx context.Context, in *CreateUserInput, opts ...grpc.CallOption) (*CreateUserOutput, error) {
	out := new(CreateUserOutput)
	err := c.cc.Invoke(ctx, "/UserManager/CreateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagerClient) DeleteUser(ctx context.Context, in *DeleteUserInput, opts ...grpc.CallOption) (*DeleteUserOutput, error) {
	out := new(DeleteUserOutput)
	err := c.cc.Invoke(ctx, "/UserManager/DeleteUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagerClient) GetComments(ctx context.Context, in *GetCommentsInput, opts ...grpc.CallOption) (*GetCommentsOutput, error) {
	out := new(GetCommentsOutput)
	err := c.cc.Invoke(ctx, "/UserManager/GetComments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagerClient) CreateComment(ctx context.Context, in *CreateCommentInput, opts ...grpc.CallOption) (*CreateCommentOutput, error) {
	out := new(CreateCommentOutput)
	err := c.cc.Invoke(ctx, "/UserManager/CreateComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserManagerServer is the server API for UserManager service.
// All implementations must embed UnimplementedUserManagerServer
// for forward compatibility
type UserManagerServer interface {
	CreateUser(context.Context, *CreateUserInput) (*CreateUserOutput, error)
	DeleteUser(context.Context, *DeleteUserInput) (*DeleteUserOutput, error)
	GetComments(context.Context, *GetCommentsInput) (*GetCommentsOutput, error)
	CreateComment(context.Context, *CreateCommentInput) (*CreateCommentOutput, error)
	mustEmbedUnimplementedUserManagerServer()
}

// UnimplementedUserManagerServer must be embedded to have forward compatible implementations.
type UnimplementedUserManagerServer struct {
}

func (UnimplementedUserManagerServer) CreateUser(context.Context, *CreateUserInput) (*CreateUserOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedUserManagerServer) DeleteUser(context.Context, *DeleteUserInput) (*DeleteUserOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (UnimplementedUserManagerServer) GetComments(context.Context, *GetCommentsInput) (*GetCommentsOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetComments not implemented")
}
func (UnimplementedUserManagerServer) CreateComment(context.Context, *CreateCommentInput) (*CreateCommentOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateComment not implemented")
}
func (UnimplementedUserManagerServer) mustEmbedUnimplementedUserManagerServer() {}

// UnsafeUserManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserManagerServer will
// result in compilation errors.
type UnsafeUserManagerServer interface {
	mustEmbedUnimplementedUserManagerServer()
}

func RegisterUserManagerServer(s grpc.ServiceRegistrar, srv UserManagerServer) {
	s.RegisterService(&_UserManager_serviceDesc, srv)
}

func _UserManager_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagerServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UserManager/CreateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagerServer).CreateUser(ctx, req.(*CreateUserInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManager_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagerServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UserManager/DeleteUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagerServer).DeleteUser(ctx, req.(*DeleteUserInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManager_GetComments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCommentsInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagerServer).GetComments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UserManager/GetComments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagerServer).GetComments(ctx, req.(*GetCommentsInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManager_CreateComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCommentInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagerServer).CreateComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UserManager/CreateComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagerServer).CreateComment(ctx, req.(*CreateCommentInput))
	}
	return interceptor(ctx, in, info, handler)
}

var _UserManager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "UserManager",
	HandlerType: (*UserManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUser",
			Handler:    _UserManager_CreateUser_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _UserManager_DeleteUser_Handler,
		},
		{
			MethodName: "GetComments",
			Handler:    _UserManager_GetComments_Handler,
		},
		{
			MethodName: "CreateComment",
			Handler:    _UserManager_CreateComment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user_manager.proto",
}
