// Code generated by protoc-gen-go-http. DO NOT EDIT.
// See https://github.com/eolymp/go-proto-http for more details.

package compete

import (
	json "encoding/json"
	mux "github.com/gorilla/mux"
	schema "github.com/gorilla/schema"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protojson "google.golang.org/protobuf/encoding/protojson"
	proto "google.golang.org/protobuf/proto"
	ioutil "io/ioutil"
	http "net/http"
)

// _UserManager_HTTPReadRequestBody parses body into proto.Message
func _UserManager_HTTPReadRequestBody(r *http.Request, v proto.Message) error {
	data, err := ioutil.ReadAll(r.Body)
	if err != nil {
		return err
	}

	if err := protojson.Unmarshal(data, v); err != nil {
		return err
	}

	return nil
}

// _UserManager_HTTPWriteResponse writes proto.Message to HTTP response
func _UserManager_HTTPWriteResponse(w http.ResponseWriter, v proto.Message) {
	data, err := protojson.Marshal(v)
	if err != nil {
		_UserManager_HTTPWriteErrorResponse(w, err)
		return
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)

	_, _ = w.Write(data)
}

// _UserManager_HTTPErrorParams keeps data structure for errors response
type _UserManager_HTTPErrorParams struct {
	Code    string        `json:"code,omitempty"`
	Message string        `json:"error,omitempty"`
	Details []interface{} `json:"details,omitempty"`
}

// _UserManager_HTTPWriteErrorResponse writes error to HTTP response with error status code
func _UserManager_HTTPWriteErrorResponse(w http.ResponseWriter, e error) {
	s := status.Convert(e)

	w.Header().Set("Content-Type", "application/json")

	switch s.Code() {
	case codes.OK:
		w.WriteHeader(http.StatusOK)
	case codes.Canceled:
		w.WriteHeader(http.StatusGatewayTimeout)
	case codes.Unknown:
		w.WriteHeader(http.StatusInternalServerError)
	case codes.InvalidArgument:
		w.WriteHeader(http.StatusBadRequest)
	case codes.DeadlineExceeded:
		w.WriteHeader(http.StatusGatewayTimeout)
	case codes.NotFound:
		w.WriteHeader(http.StatusNotFound)
	case codes.AlreadyExists:
		w.WriteHeader(http.StatusConflict)
	case codes.PermissionDenied:
		w.WriteHeader(http.StatusForbidden)
	case codes.ResourceExhausted:
		w.WriteHeader(http.StatusInsufficientStorage)
	case codes.FailedPrecondition:
		w.WriteHeader(http.StatusPreconditionFailed)
	case codes.Aborted:
		w.WriteHeader(http.StatusServiceUnavailable)
	case codes.OutOfRange:
		w.WriteHeader(http.StatusRequestedRangeNotSatisfiable)
	case codes.Unimplemented:
		w.WriteHeader(http.StatusNotImplemented)
	case codes.Internal:
		w.WriteHeader(http.StatusInternalServerError)
	case codes.Unavailable:
		w.WriteHeader(http.StatusServiceUnavailable)
	case codes.DataLoss:
		w.WriteHeader(http.StatusInternalServerError)
	case codes.Unauthenticated:
		w.WriteHeader(http.StatusUnauthorized)
	default:
		w.WriteHeader(http.StatusInternalServerError)
	}

	err := json.NewEncoder(w).Encode(&_UserManager_HTTPErrorParams{
		Code:    s.Code().String(),
		Message: s.Message(),
		Details: s.Details(),
	})

	if err != nil {
		panic(err)
	}
}

// NewUserManagerHandler constructs new http.Handler for UserManagerServer
func NewUserManagerHandler(srv UserManagerServer) http.Handler {
	router := mux.NewRouter()
	router.Handle("/users", _UserManager_CreateUser_HTTP_Handler(srv)).Methods("POST")
	router.Handle("/users/{user_id}", _UserManager_DeleteUser_HTTP_Handler(srv)).Methods("DELETE")
	router.Handle("/users/{user_id}/comments", _UserManager_GetComments_HTTP_Handler(srv)).Methods("GET")
	router.Handle("/users/{user_id}/comments", _UserManager_CreateComment_HTTP_Handler(srv)).Methods("POST")
	return router
}

func _UserManager_CreateUser_HTTP_Handler(srv UserManagerServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &CreateUserInput{}

		if err := _UserManager_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_UserManager_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.CreateUser(r.Context(), in)
		if err != nil {
			_UserManager_HTTPWriteErrorResponse(w, err)
			return
		}

		_UserManager_HTTPWriteResponse(w, out)
	})
}

func _UserManager_DeleteUser_HTTP_Handler(srv UserManagerServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DeleteUserInput{}

		vars := mux.Vars(r)
		in.UserId = vars["user_id"]

		out, err := srv.DeleteUser(r.Context(), in)
		if err != nil {
			_UserManager_HTTPWriteErrorResponse(w, err)
			return
		}

		_UserManager_HTTPWriteResponse(w, out)
	})
}

func _UserManager_GetComments_HTTP_Handler(srv UserManagerServer) http.Handler {
	type query struct {
		Offset int32  `schema:"offset"`
		Size   int32  `schema:"size"`
		Sort   string `schema:"sort"`
		Order  string `schema:"order"`
	}

	decoder := schema.NewDecoder()
	decoder.IgnoreUnknownKeys(true)

	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &GetCommentsInput{}

		q := &query{}
		if err := decoder.Decode(q, r.URL.Query()); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_UserManager_HTTPWriteErrorResponse(w, err)
			return
		}

		in.Offset = q.Offset
		in.Size = q.Size
		in.Sort = q.Sort
		in.Order = q.Order

		vars := mux.Vars(r)
		in.UserId = vars["user_id"]

		out, err := srv.GetComments(r.Context(), in)
		if err != nil {
			_UserManager_HTTPWriteErrorResponse(w, err)
			return
		}

		_UserManager_HTTPWriteResponse(w, out)
	})
}

func _UserManager_CreateComment_HTTP_Handler(srv UserManagerServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &CreateCommentInput{}

		in.Comment = &Comment{}
		if err := _UserManager_HTTPReadRequestBody(r, in.Comment); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_UserManager_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.UserId = vars["user_id"]

		out, err := srv.CreateComment(r.Context(), in)
		if err != nil {
			_UserManager_HTTPWriteErrorResponse(w, err)
			return
		}

		_UserManager_HTTPWriteResponse(w, out)
	})
}
